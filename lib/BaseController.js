/**
 * Base class to create a controller.
 * @class BaseController
 */
class BaseController
{
    /**
     * Controller instances are created when `Application::loadService` is called.
     * @constructor
     * @param {Application} app - The application it running on.
     * @param {string} serviceName - Service name, used internally to load models and views related to this same service.
     */
    constructor(app, serviceName)
    {
        this.app = app;
        this.service = serviceName;
        this.model = {};

        this.header = [];
        this.footer = [];
        this.content = [];
    }

    /**
     * It is called right after it's created. Use it to load things you need.
     */
    init() {};

    /**
     * Before an request is routed to a controller method, preHandle has to approve it. You can use it to check a session.
     * @param {Object} ctx - context from koa
     * @returns {Boolean} Can the request procede?
     */
    async preHandle(ctx) { return true; }

    /**
     * After the request is done. You can use it to save some log.
     * @param {Object} ctx
     */
    async posHandle(ctx) {}

    /**
     * Load a model you need to use.
     * @access protected
     * @param {string} name - The name of the model without the ending 'Model'.
     */
    loadModel(name)
    {
        this.model[name.firstCharToLowerCase()] = this.app.getModel(name, this.service);
    }

    /**
     * Load a model you need to use.
     * @access protected
     * @param {string} name - The name of the view without the ending 'View'.
     * @param {Object} vars - The view data needed to created the values.
     * @returns {string} The finished job generated by the view. You have to send it to ctx.body or a e-mail.
     */
    renderView(name, vars)
    {
        if(vars === undefined) vars = {};
        var view = this.app.getView(name, this.service);
        vars = this.app.setGlobalVarsToRenderViews( vars );

        if(vars.render === undefined)
        {
            let self = this;
            vars.render = function (name) { return self.renderView(name, vars); }
        }

        if(view != null)
        {
            if(view[0] == 'mst')
                return mustache.render(view[1], vars);
            else if(view[0] == 'ejs')
            {
                return view[1](vars);
            }
            else if(view[0] == 'js')
                return view[1](vars);
            else
            {
                throw new Error('Error: View \'' + name + '\' extension not supported.');
            }
        }
        else
        {
            throw new Error('Error: View \'' + name + '\' not found.');
        }
    }
}

module.exports = BaseController;